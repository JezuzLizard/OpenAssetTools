delimiters "$", "$"

// Everything related to loading a pointer with a count that is statically 1

LoadSinglePointerInner(context, structure, member, reference) ::= <<
$if(member.Computations.IsTempBlock)$
$member.Member.VariableType.Type.FullName$* ptr = $TypeVarName(structure.Type)$->$member.Member.Name$$PrintArrayIndices(reference)$;
$endif$$\\$

$TypeVarName(structure.Type)$->$member.Member.Name$ = m_stream->Alloc<$TypeDeclaration(member.Member.VariableType)$$PrintFollowingReferences(reference.FollowingReferences)$>(alignof($TypeDeclaration(member.Member.VariableType)$$PrintFollowingReferences(reference.FollowingReferences)$)); // $member.Member.VariableType.Type.Alignment$$\\$
$\\$
$\\$
$if(member.Computations.IsTempBlock)$

$member.Member.VariableType.Type.FullName$** toInsert = nullptr;
if(ptr == PTR_INSERT)
    toInsert = m_stream->InsertPointer<$member.Member.VariableType.Type.FullName$>();

$endif$$\\$
$\\$
$\\$
$if(member.StructureType && !member.StructureType.IsLeaf && !member.Computations.IsRuntimeBlock)$
$TypeVarName(member.Member.VariableType.Type)$ = $TypeVarName(structure.Type)$->$member.Member.Name$$PrintArrayIndices(reference)$;
Load_$member.Member.VariableType.Type.Name$(true);$\\$
$if(member.StructureType.PostLoadAction)$

$CustomAction(member.StructureType.PostLoadAction)$
$endif$
$else$
m_stream->Load<$TypeDeclaration(member.Member.VariableType)$$PrintFollowingReferences(reference.FollowingReferences)$>($TypeVarName(structure.Type)$->$member.Member.Name$$PrintArrayIndices(reference)$);$\\$
$endif$$\\$
$\\$
$if(member.Computations.IsTempBlock)$

if(toInsert != nullptr)
    *toInsert = $TypeVarName(structure.Type)$->$member.Member.Name$;$\\$
$endif$
>>

LoadSinglePointerAsset(context, structure, member, reference) ::= <<
$LoaderClassName(member.StructureType)$ loader(m_script_string_provider, m_zone, m_stream);
AddDependency(loader.Load(&$TypeVarName(structure.Type)$->$member.Member.Name$$PrintArrayIndices(reference)$));
>>

LoadSinglePointer_Reuse(context, structure, member, reference) ::= <<
$if(member.Computations.IsTempBlock)$
if($TypeVarName(structure.Type)$->$member.Member.Name$$PrintArrayIndices(reference)$ == PTR_FOLLOWING || $TypeVarName(structure.Type)$->$member.Member.Name$$PrintArrayIndices(reference)$ == PTR_INSERT)
{
    $LoadSinglePointerInner(context, structure, member, reference)$
}
else
{
    $TypeVarName(structure.Type)$->$member.Member.Name$$PrintArrayIndices(reference)$ = m_stream->ConvertOffsetToAlias($TypeVarName(structure.Type)$->$member.Member.Name$$PrintArrayIndices(reference)$);
}$\\$
$else$
if($TypeVarName(structure.Type)$->$member.Member.Name$$PrintArrayIndices(reference)$ == PTR_FOLLOWING)
{
    $LoadSinglePointerInner(context, structure, member, reference)$
}
else
{
    $TypeVarName(structure.Type)$->$member.Member.Name$$PrintArrayIndices(reference)$ = m_stream->ConvertOffsetToPointer($TypeVarName(structure.Type)$->$member.Member.Name$$PrintArrayIndices(reference)$);
}$\\$
$endif$
>>

LoadSinglePointer_PointerCheck(context, structure, member, reference) ::= <<
if ($TypeVarName(structure.Type)$->$member.Member.Name$$PrintArrayIndices(reference)$)
{
    $if(member.StructureType && member.StructureType.IsAsset)$
    $LoadSinglePointerAsset(context, structure, member, reference)$
    $else$
    $if(member.IsReusable)$
    $LoadSinglePointer_Reuse(context, structure, member, reference)$
    $else$
    $LoadSinglePointerInner(context, structure, member, reference)$
    $endif$
    $endif$
}
>>

LoadSinglePointer_String(context, structure, member, reference) ::= <%
$if(member.Member.VariableType.IsConst)$
varXString = &$TypeVarName(structure.Type)$->$member.Member.Name$$PrintArrayIndices(reference)$;$\n$
$else$
varXString = const_cast<const char**>(&$TypeVarName(structure.Type)$->$member.Member.Name$$PrintArrayIndices(reference)$);$\n$
$endif$
LoadXString(false);
%>

LoadSinglePointer_TypeCheck(context, structure, member, reference) ::= <%
$if(member.IsString)$
$LoadSinglePointer_String(context, structure, member, reference)$
$elseif(member.IsScriptString)$
// ScriptString $member.Member.Name$
$else$
$LoadSinglePointer_PointerCheck(context, structure, member, reference)$
$endif$
%>

LoadSinglePointer_Block(context, structure, member, reference) ::= <%
$if(member.Computations.IsNotDefaultNormalBlock)$
m_stream->PushBlock($member.Block.Name$);$\n$
$endif$

$LoadSinglePointer_TypeCheck(context, structure, member, reference)$

$if(member.Computations.IsNotDefaultNormalBlock)$
$\n$m_stream->PopBlock();
$endif$
%>

LoadSinglePointer(context, structure, member, reference) ::= <%
$LoadSinglePointer_Block(context, structure, member, reference)$
%>