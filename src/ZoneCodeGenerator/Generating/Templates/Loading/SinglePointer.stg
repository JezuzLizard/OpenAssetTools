delimiters "$", "$"

// Everything related to loading a pointer with a count that is statically 1

LoadSinglePointerInner(context, structure, member, reference) ::= <%
$TypeVarName(structure)$->$member.Member.Name$ = m_stream->Alloc<$TypeDeclaration(member.Member.VariableType)$$PrintFollowingReferences(reference.FollowingReferences)$>(alignof($TypeDeclaration(member.Member.VariableType)$$PrintFollowingReferences(reference.FollowingReferences)$));$\n$

$if(member.StructureType && !member.StructureType.IsLeaf)$

$TypeVarName(member.StructureType)$ = $TypeVarName(structure)$->$member.Member.Name$$PrintArrayIndices(reference)$;$\n$
Load_$member.Member.VariableType.Type.Name$(true);

$else$

m_stream->Load<$TypeDeclaration(member.Member.VariableType)$$PrintFollowingReferences(reference.FollowingReferences)$>($TypeVarName(structure)$->$member.Member.Name$$PrintArrayIndices(reference)$);

$endif$
%>

LoadSinglePointerAsset(context, structure, member, reference) ::= <<
$LoaderClassName(member.StructureType)$ loader(m_script_string_provider, m_zone, m_stream);
loader.Load(&$TypeVarName(structure)$->$member.Member.Name$$PrintArrayIndices(reference)$);
>>

LoadSinglePointer_PointerCheck(context, structure, member, reference) ::= <<
if ($TypeVarName(structure)$->$member.Member.Name$$PrintArrayIndices(reference)$)
{
    $if(member.StructureType && member.StructureType.IsAsset)$
    $LoadSinglePointerAsset(context, structure, member, reference)$
    $else$
    $if(member.IsReusable)$
    if($TypeVarName(structure)$->$member.Member.Name$$PrintArrayIndices(reference)$ == PTR_FOLLOWING)
    {
        $LoadSinglePointerInner(context, structure, member, reference)$
    }
    else
    {
        $TypeVarName(structure)$->$member.Member.Name$$PrintArrayIndices(reference)$ = m_stream->ConvertOffsetToPointer($TypeVarName(structure)$->$member.Member.Name$$PrintArrayIndices(reference)$);
    }
    $else$
    $LoadSinglePointerInner(context, structure, member, reference)$
    $endif$
    $endif$
}
>>

LoadSinglePointer_String(context, structure, member, reference) ::= <%
varXString = &$TypeVarName(structure)$->$member.Member.Name$$PrintArrayIndices(reference)$;$\n$
LoadXString(false);
%>

LoadSinglePointer_TypeCheck(context, structure, member, reference) ::= <%
$if(member.IsString)$
$LoadSinglePointer_String(context, structure, member, reference)$
$elseif(member.IsScriptString)$
// ScriptString $member.Member.Name$
$else$
$LoadSinglePointer_PointerCheck(context, structure, member, reference)$
$endif$
%>

LoadSinglePointer_Condition(context, structure, member, reference) ::= <<
$if(member.Condition)$
if($PrintEvaluation(member.Condition)$)
{
    $LoadSinglePointer_TypeCheck(context, structure, member, reference)$
}
$if(structure.IsUnion)$
return;
$endif$
$else$$\\$
$LoadSinglePointer_TypeCheck(context, structure, member, reference)$$\\$
$endif$
>>

LoadSinglePointer(context, structure, member, reference) ::= <%
$LoadSinglePointer_Condition(context, structure, member, reference)$
%>