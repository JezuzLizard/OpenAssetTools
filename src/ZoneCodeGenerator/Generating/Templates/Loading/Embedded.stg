delimiters "$", "$"

// Everything related to loading an embedded reference

ArrayCount(reference) ::= <%
$if(reference.HasDynamicArrayCount)$
$PrintEvaluation(reference.DynamicArrayCountEvaluation)$
$else$
$reference.ArraySize$
$endif$
%>

LoadEmbedded_Load(context, structure, member, reference) ::= <<
$if(!member.IsLeaf)$
$TypeVarName(member.Member.VariableType.Type)$ = &$TypeVarName(structure.Type)$->$member.Member.Name$$PrintArrayIndices(reference)$;
Load_$member.Member.VariableType.Type.Name$($if(member.Computations.IsAfterPartialLoad)$true$else$false$endif$);$\\$
$if(member.StructureType.PostLoadAction)$
$CustomAction(member.StructureType.PostLoadAction)$
$endif$
$elseif(member.Computations.IsAfterPartialLoad)$
m_stream->Load<$TypeDeclaration(member.Member.VariableType)$$PrintFollowingReferences(reference.FollowingReferences)$>(&$TypeVarName(structure.Type)$->$member.Member.Name$$PrintArrayIndices(reference)$);$\\$
$endif$
>>

LoadEmbedded_TypeCheck(context, structure, member, reference) ::= <%
$if(member.IsScriptString)$
$TypeVarName(structure.Type)$->$member.Member.Name$$PrintArrayIndices(reference)$ = UseScriptString($TypeVarName(structure.Type)$->$member.Member.Name$$PrintArrayIndices(reference)$);
$else$
$LoadEmbedded_Load(context, structure, member, reference)$
$endif$
%>

LoadEmbedded_Block(context, structure, member, reference) ::= <%
$if(member.Computations.IsNotDefaultNormalBlock)$
m_stream->PushBlock($member.Block.Name$);$\n$
$endif$

$LoadEmbedded_TypeCheck(context, structure, member, reference)$

$if(member.Computations.IsNotDefaultNormalBlock)$
$\n$m_stream->PopBlock();
$endif$
%>

LoadEmbedded(context, structure, member, reference) ::= <%
$LoadEmbedded_Block(context, structure, member, reference)$
%>

LoadEmbeddedArray_Load(context, structure, member, reference) ::= <<
$if(!member.IsLeaf)$
$TypeVarName(member.Member.VariableType.Type)$ = $TypeVarName(structure.Type)$->$member.Member.Name$$PrintArrayIndices(reference)$;
LoadArray_$member.Member.VariableType.Type.Name$($if(member.Computations.IsAfterPartialLoad)$true$else$false$endif$, $ArrayCount(reference)$);$\\$
$elseif(member.Computations.IsAfterPartialLoad)$
m_stream->Load<$TypeDeclaration(member.Member.VariableType)$$PrintFollowingReferences(reference.FollowingReferences)$>($TypeVarName(structure.Type)$->$member.Member.Name$$PrintArrayIndices(reference)$, $ArrayCount(reference)$);$\\$
$endif$
>>

LoadEmbeddedArray_TypeCheck(context, structure, member, reference) ::= <%
$if(member.IsScriptString)$
varScriptString = $TypeVarName(structure.Type)$->$member.Member.Name$$PrintArrayIndices(reference)$;$\n$
LoadScriptStringArray(false, $ArrayCount(reference)$);
$else$
$LoadEmbeddedArray_Load(context, structure, member, reference)$
$endif$
%>

LoadEmbeddedArray(context, structure, member, reference) ::= <<
$LoadEmbeddedArray_TypeCheck(context, structure, member, reference)$
>>